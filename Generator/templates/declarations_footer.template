

/****************************************************************************************
* Initialise bindings
****************************************************************************************/

static void gx_initPeripheralAndHandlers(void)
{

#ifdef GX_AZURE_IOT
    dx_azureConnect(&dx_config, NETWORK_INTERFACE, PNP_MODEL_ID);
#else
    if (NELEMS(device_twin_binding_set) > 0 || NELEMS(direct_method_binding_set) > 0) {
        dx_azureConnect(&dx_config, NETWORK_INTERFACE, PNP_MODEL_ID);
    }
#endif // GX_AZURE_IOT

    if (NELEMS(gpio_binding_set) > 0) {
        dx_gpioSetOpen(gpio_binding_set, NELEMS(gpio_binding_set));
    }

    if (NELEMS(device_twin_binding_set) > 0) {
        dx_deviceTwinSubscribe(device_twin_binding_set, NELEMS(device_twin_binding_set));
    }

    if (NELEMS(direct_method_binding_set) > 0 ) {
        dx_directMethodSubscribe(direct_method_binding_set, NELEMS(direct_method_binding_set));
    }

    if (NELEMS(timer_binding_set) > 0) {
        dx_timerSetStart(timer_binding_set, NELEMS(timer_binding_set));
    }
    
    if (NELEMS(timer_bindings_oneshot) > 0) {
        for (int i = 0; i < NELEMS(timer_bindings_oneshot); i++) {
            // defaults to starting all oneshot timers after 1 second
            dx_timerOneShotSet(timer_bindings_oneshot[i], &(struct timespec){ 1, 0 });
        }
    }

#ifdef GX_DEFERRED_UPDATE
   	dx_deferredUpdateRegistration(DeferredUpdateCalculate_gx_handler, DeferredUpdateNotification_gx_handler);
#endif

}

static void gx_closePeripheralAndHandlers(void){
    if (NELEMS(timer_binding_set) > 0) {
	    dx_timerSetStop(timer_binding_set, NELEMS(timer_binding_set));
    }

    if (NELEMS(gpio_binding_set) > 0) {
        dx_gpioSetClose(gpio_binding_set, NELEMS(gpio_binding_set));
    }

	dx_deviceTwinUnsubscribe();
	dx_directMethodUnsubscribe();
    dx_azureToDeviceStop();
}
