/// <summary>
/// This timer extends the app level lease watchdog timer
/// </summary>
/// <param name="eventLoopTimer"></param>
static void Watchdog_gx_handler(EventLoopTimer *eventLoopTimer) {{
    if (ConsumeEventLoopTimerEvent(eventLoopTimer) != 0) {{
        dx_terminate(DX_ExitCode_ConsumeEventLoopTimeEvent);
        return;
    }}
    timer_settime(watchdogTimer, 0, &watchdogInterval, NULL);
}}

/// <summary>
/// Set up watchdog timer - the lease is extended via the Watchdog_handler function
/// </summary>
/// <param name=""></param>
void StartWatchdog(void) {{
	struct sigevent alarmEvent;
	alarmEvent.sigev_notify = SIGEV_SIGNAL;
	alarmEvent.sigev_signo = SIGALRM;
	alarmEvent.sigev_value.sival_ptr = &watchdogTimer;

	if (timer_create(CLOCK_MONOTONIC, &alarmEvent, &watchdogTimer) == 0) {{
		if (timer_settime(watchdogTimer, 0, &watchdogInterval, NULL) == -1) {{
			Log_Debug("Issue setting watchdog timer. %s %d\n", strerror(errno), errno);
		}}
	}}
}}