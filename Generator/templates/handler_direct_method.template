/// <summary>
/// What is the purpose of this direct method handler function?
/// </summary>
// Direct method JSON payload example {{"Duration":2}}:
static DX_DIRECT_METHOD_RESPONSE_CODE {name}_gx_handler(JSON_Value *json, DX_DIRECT_METHOD_BINDING *directMethodBinding, char **responseMsg) {{
    char duration_str[] = "Duration";
    int requested_duration_seconds;

    // Allocate and initialize a response message buffer. 
    // The calling function is responsible for freeing the memory
    const size_t responseLen = 100; 
    *responseMsg = (char*)malloc(responseLen);
    memset(*responseMsg, 0, responseLen);

    JSON_Object *jsonObject = json_value_get_object(json);
    if (jsonObject == NULL) {{
        snprintf(*responseMsg, responseLen, "%s call failed. Invalid JSON received type.", directMethodBinding->methodName);
        return DX_METHOD_FAILED;
    }}

    // check JSON properties sent through are the correct type
    if (!json_object_has_value_of_type(jsonObject, duration_str, JSONNumber)) {{
        snprintf(*responseMsg, responseLen, "%s call failed. Incorrect JSON type.", directMethodBinding->methodName);
        return DX_METHOD_FAILED;
    }}

    requested_duration_seconds = (int)json_object_get_number(jsonObject, duration_str);
    Log_Debug("Duration %d \n", requested_duration_seconds);

    if (requested_duration_seconds < 0 || requested_duration_seconds > 120 ) {{
        snprintf(*responseMsg, responseLen, "%s call failed. Duration seconds (%d) out of range.", directMethodBinding->methodName, requested_duration_seconds);
        return DX_METHOD_FAILED;
    }}

    // IMPLEMENT YOUR ACTION HERE

    snprintf(*responseMsg, responseLen, "%s called successfully", directMethodBinding->methodName);

    return DX_METHOD_SUCCEEDED;
}}